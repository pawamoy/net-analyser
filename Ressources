Protocol Codes 
======================================================================
1 	--  ICMP
6 	--  TCP
17 	--  UDP



ICMP Messages
======================================================================
ICMP_ECHOREPLY		0	/* Echo Reply				*/
ICMP_DEST_UNREACH	3	/* Destination Unreachable	*/
ICMP_SOURCE_QUENCH	4	/* Source Quench			*/
ICMP_REDIRECT		5	/* Redirect (change route)	*/
ICMP_ECHO			8	/* Echo Request				*/
ICMP_TIME_EXCEEDED	11	/* Time Exceeded			*/
ICMP_PARAMETERPROB	12	/* Parameter Problem		*/
ICMP_TIMESTAMP		13	/* Timestamp Request		*/
ICMP_TIMESTAMPREPLY	14	/* Timestamp Reply			*/
ICMP_INFO_REQUEST	15	/* Information Request		*/
ICMP_INFO_REPLY		16	/* Information Reply		*/
ICMP_ADDRESS		17	/* Address Mask Request		*/
ICMP_ADDRESSREPLY	18	/* Address Mask Reply		*/
NR_ICMP_TYPES		18


/* Codes for UNREACH. */
ICMP_NET_UNREACH	0	/* Network Unreachable			*/
ICMP_HOST_UNREACH	1	/* Host Unreachable				*/
ICMP_PROT_UNREACH	2	/* Protocol Unreachable			*/
ICMP_PORT_UNREACH	3	/* Port Unreachable				*/
ICMP_FRAG_NEEDED	4	/* Fragmentation Needed/DF set	*/
ICMP_SR_FAILED		5	/* Source Route failed			*/
ICMP_NET_UNKNOWN	6
ICMP_HOST_UNKNOWN	7
ICMP_HOST_ISOLATED	8
ICMP_NET_ANO		9
ICMP_HOST_ANO		10
ICMP_NET_UNR_TOS	11
ICMP_HOST_UNR_TOS	12
ICMP_PKT_FILTERED	13	/* Packet filtered						 */
ICMP_PREC_VIOLATION	14	/* Precedence violation					 */
ICMP_PREC_CUTOFF	15	/* Precedence cut off					 */
NR_ICMP_UNREACH		15	/* instead of hardcoding immediate value */

/* Codes for REDIRECT. */
ICMP_REDIR_NET		0	/* Redirect Net				*/
ICMP_REDIR_HOST		1	/* Redirect Host			*/
ICMP_REDIR_NETTOS	2	/* Redirect Net for TOS		*/
ICMP_REDIR_HOSTTOS	3	/* Redirect Host for TOS	*/

/* Codes for TIME_EXCEEDED. */
ICMP_EXC_TTL		0	/* TTL count exceeded			*/
ICMP_EXC_FRAGTIME	1	/* Fragment Reass time exceeded	*/



TCP Messages
======================================================================
enum {
  TCP_ESTABLISHED = 1,
  TCP_SYN_SENT,
  TCP_SYN_RECV,
  TCP_FIN_WAIT1,
  TCP_FIN_WAIT2,
  TCP_TIME_WAIT,
  TCP_CLOSE,
  TCP_CLOSE_WAIT,
  TCP_LAST_ACK,
  TCP_LISTEN,
  TCP_CLOSING,   /* now a valid state */
  TCP_MAX_STATES /* Leave at the end! */
};



Set the send/recv timeout values
======================================================================

timeout = 1000;
bread = setsockopt(sockRaw, SOL_SOCKET, SO_RCVTIMEO, (char*)&timeout, sizeof(timeout));
if(bread == -1)
{
	perror("setsockopt(SO_RCVTIMEO)");
	return -1;
}
timeout = 1000;
bread = setsockopt(sockRaw, SOL_SOCKET, SO_SNDTIMEO, (char*)&timeout, sizeof(timeout));
if (bread == -1)
{
	perror("setsockopt(SO_SNDTIMEO)");
	return -1;
}



Structures
======================================================================
ICMP Header
==============================
struct icmphdr {
  __u8          type;
  __u8          code;
  __sum16       checksum;
  union {
        struct {
                __be16  id;
                __be16  sequence;
        } echo;
        __be32  gateway;
        struct {
                __be16  __unused;
                __be16  mtu;
        } frag;
  } un;
};

IP Header
==============================
struct iphdr {
#if defined(__LITTLE_ENDIAN_BITFIELD)
        __u8    ihl:4,
                version:4;
#elif defined (__BIG_ENDIAN_BITFIELD)
        __u8    version:4,
                ihl:4;
#else
#error  "Please fix <asm/byteorder.h>"
#endif
        __u8    tos;
        __u16   tot_len;
        __u16   id;
        __u16   frag_off;
        __u8    ttl;
        __u8    protocol;
        __u16   check;
        __u32   saddr;
        __u32   daddr;
        /*The options start here. */
};

UDP Header
==============================
#ifdef __FAVOR_BSD
struct udphdr {
    u_int16_t uh_sport;  /* source port */
    u_int16_t uh_dport;  /* destination port */
    u_int16_t uh_ulen;   /* udp length */
    u_int16_t uh_sum;    /* udp checksum */
};
#else
struct udphdr {
    u_int16_t source;
    u_int16_t dest;
    u_int16_t len;
    u_int16_t check;
};
#endif

TCP Header
==============================
http://www.cse.scu.edu/~dclark/am_256_graph_theory/linux_2_6_stack/linux_2tcp_8h-source.html
struct tcphdr {
        __u16   source;
        __u16   dest;
        __u32   seq;
        __u32   ack_seq;
#if defined(__LITTLE_ENDIAN_BITFIELD)
        __u16   res1:4,
                doff:4,
                fin:1,
                syn:1,
                rst:1,
                psh:1,
                ack:1,
                urg:1,
                ece:1,
                cwr:1;
#elif defined(__BIG_ENDIAN_BITFIELD)
        __u16   doff:4,
                res1:4,
                cwr:1,
                ece:1,
                urg:1,
                ack:1,
                psh:1,
                rst:1,
                syn:1,
                fin:1;
#else
#error  "Adjust your <asm/byteorder.h> defines"
#endif  
        __u16   window;
        __u16   check;
        __u16   urg_ptr;
};
